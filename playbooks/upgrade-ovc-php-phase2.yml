---
- hosts: webservers
  vars:
    # Upgrade configuration
    backup_timestamp: "{{ ansible_date_time.epoch }}"
    target_wp_image: "wordpress:6.8"
    
    # Container names
    wpcontainer: "{{ ovc_wp.wp.container }}"
    dbcontainer: "{{ ovc_wp.db.container }}"
    
  tasks:
    - name: Pre-upgrade validation
      shell: |
        echo "🔍 Pre-upgrade validation..."
        
        # Check current site is working
        response=$(curl -s -o /dev/null -w "%{http_code}" https://{{ ovc_wp_hosts }} || echo "000")
        if [ "$response" != "200" ] && [ "$response" != "301" ] && [ "$response" != "302" ]; then
          echo "❌ Site not responding correctly (HTTP $response). Aborting upgrade."
          exit 1
        fi
        
        echo "✅ Site is responding (HTTP $response)"
        echo "✅ Ready to proceed with upgrade"
      register: precheck
      
    - name: Create final backup before upgrade
      shell: |
        echo "💾 Creating final backup before upgrade..."
        mkdir -p ~/upgrade-backups-{{ backup_timestamp }}
        
        # Backup database
        docker exec {{ wpcontainer }} wp db export /tmp/final-backup-{{ backup_timestamp }}.sql --allow-root
        docker cp {{ wpcontainer }}:/tmp/final-backup-{{ backup_timestamp }}.sql ~/upgrade-backups-{{ backup_timestamp }}/
        
        # Backup current container
        docker commit {{ wpcontainer }} backup-wp-{{ backup_timestamp }}
        docker commit {{ dbcontainer }} backup-db-{{ backup_timestamp }}
        
        echo "✅ Backup complete: ~/upgrade-backups-{{ backup_timestamp }}/"
        echo "✅ Container snapshots: backup-wp-{{ backup_timestamp }}, backup-db-{{ backup_timestamp }}"
      
    - name: Backup current wp-config.php
      shell: docker cp {{ wpcontainer }}:/var/www/html/wp-config.php /tmp/wp-config.php.backup
      
    - name: Stop current WordPress container
      docker_container:
        name: "{{ wpcontainer }}"
        state: stopped
      
    - name: Create new WordPress 6.8 container
      docker_container:
        image: "{{ target_wp_image }}"
        name: "{{ wpcontainer }}-new"
        restart_policy: always
        env:
          HSTS: "off"
          LETSENCRYPT_HOST: "{{ ovc_wp_hosts }}"
          VIRTUAL_HOST: "{{ ovc_wp_hosts }}"
          WORDPRESS_DB_NAME: "{{ ovc_wp.db.name }}"
          WORDPRESS_DB_PASSWORD: "{{ ovc_wp.db.password }}"
          WORDPRESS_DB_USER: "{{ ovc_wp.db.user }}"
          WORDPRESS_DB_HOST: "mysql"
          WORDPRESS_CONFIG_EXTRA: |
            define('WP_HOME', 'https://{{ ovc_wp_hosts }}');
            define('WP_SITEURL', 'https://{{ ovc_wp_hosts }}');
        exposed_ports:
          - "80"
        links:
          - "{{ dbcontainer }}:mysql"
        volumes:
          - "{{ wpcontainer }}:/var/www/html"
      retries: 3
      delay: 10
      
    - name: Wait for new container to be ready
      pause:
        seconds: 30
        
    - name: Restore original wp-config.php
      shell: |
        echo "Restoring original wp-config.php..."
        docker cp /tmp/wp-config.php.backup {{ wpcontainer }}-new:/var/www/html/wp-config.php
        docker exec {{ wpcontainer }}-new chown www-data:www-data /var/www/html/wp-config.php
        echo "wp-config.php restored"
        
    - name: Install WP-CLI in new container
      shell: |
        echo "📦 Installing WP-CLI in new WordPress container..."
        docker exec {{ wpcontainer }}-new bash -c "
          # Download WP-CLI
          curl -O https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar
          
          # Make it executable and move to PATH
          chmod +x wp-cli.phar
          mv wp-cli.phar /usr/local/bin/wp
          
          # Verify installation
          wp --info --allow-root
        "
        echo "✅ WP-CLI installed successfully"
      ignore_errors: yes
      register: wp_cli_install
        
    - name: Test new container basic functionality
      shell: |
        echo "🧪 Testing new WordPress 6.8 container..."
        
        # Check PHP version
        php_version=$(docker exec {{ wpcontainer }}-new php -v | head -1)
        echo "PHP Version: $php_version"
        
        # Get WordPress version
        wp_version=$(docker exec {{ wpcontainer }}-new wp core version --allow-root 2>/dev/null || echo "Unable to detect via WP-CLI")
        echo "WordPress Version: $wp_version"
        
        # Test database connection using PHP (more reliable than WP-CLI db check)
        echo "Testing database connection with PHP..."
        db_test=$(docker exec {{ wpcontainer }}-new php -r "
          try {
            \$mysqli = new mysqli('mysql', '{{ ovc_wp.db.user }}', '{{ ovc_wp.db.password }}', '{{ ovc_wp.db.name }}');
            if (\$mysqli->connect_error) {
              echo '❌ DB Error: ' . \$mysqli->connect_error;
              exit(1);
            } else {
              echo '✅ DB OK - Connection successful';
              \$mysqli->close();
              exit(0);
            }
          } catch (Exception \$e) {
            echo '❌ DB Error: ' . \$e->getMessage();
            exit(1);
          }
        " 2>&1)
        db_status=$?
        echo "Database: $db_test"
        
        # Also test with WP-CLI if MySQL client tools are available
        if docker exec {{ wpcontainer }}-new which mysqlcheck &>/dev/null; then
          echo "Running WP-CLI database check..."
          docker exec {{ wpcontainer }}-new wp db check --allow-root 2>&1 || echo "Note: WP-CLI db check requires MySQL client tools"
        else
          echo "Note: MySQL client tools not installed, skipping WP-CLI db check"
        fi
        
        if [ $db_status -ne 0 ]; then
          echo "❌ Database connection failed. Rolling back..."
          exit 1
        fi
        
        echo "✅ All checks passed!"
      register: container_test
      
    - name: Run WordPress database upgrade if needed
      shell: |
        echo "🔧 Running WordPress database upgrade..."
        docker exec {{ wpcontainer }}-new wp core update-db --allow-root || true
        
        # Flush rewrite rules
        docker exec {{ wpcontainer }}-new wp rewrite flush --allow-root || true
        
        # Clear any caches
        docker exec {{ wpcontainer }}-new wp cache flush --allow-root || true
        
        echo "✅ Database upgrade complete"
      ignore_errors: yes
      
    - name: Test upgraded site functionality
      shell: |
        echo "🔍 Testing upgraded site functionality..."
        
        # Give the container time to fully start
        sleep 15
        
        # Test site response
        response=$(curl -s -o /dev/null -w "%{http_code}" http://$(docker inspect {{ wpcontainer }}-new | jq -r '.[0].NetworkSettings.IPAddress')/ || echo "000")
        echo "Site HTTP response: $response"
        
        # Check for PHP errors
        echo "Checking for PHP errors..."
        error_count=$(docker logs {{ wpcontainer }}-new 2>&1 | grep -i "php.*error\|fatal" | wc -l)
        echo "PHP error count: $error_count"
        
        if [ "$error_count" -gt 0 ]; then
          echo "⚠️  PHP errors detected:"
          docker logs {{ wpcontainer }}-new 2>&1 | grep -i "php.*error\|fatal" | tail -3
        else
          echo "✅ No PHP errors detected"
        fi
      register: functionality_test
      ignore_errors: yes
      
    - name: Switch to new container (if tests pass)
      shell: |
        echo "🔄 Switching to new WordPress 6.8 container..."
        
        # Stop old container
        docker stop {{ wpcontainer }} || true
        
        # Rename containers
        docker rename {{ wpcontainer }} {{ wpcontainer }}-old || true
        docker rename {{ wpcontainer }}-new {{ wpcontainer }}
        
        echo "✅ Container switch complete"
      when: container_test.rc == 0
      
    - name: Final validation and cleanup
      shell: |
        echo "🎯 Final validation..."
        
        # Test external site access
        sleep 20
        response=$(curl -s -o /dev/null -w "%{http_code}" https://{{ ovc_wp_hosts }} || echo "000")
        echo "External site response: $response"
        
        if [ "$response" == "200" ] || [ "$response" == "301" ] || [ "$response" == "302" ]; then
          echo "✅ Site is accessible externally"
          
          # Remove old container if everything works
          echo "🧹 Cleaning up old container..."
          docker rm {{ wpcontainer }}-old || true
          
        else
          echo "❌ Site not accessible externally. Check configuration."
          exit 1
        fi
      register: final_validation
      
    - name: Display upgrade results
      debug:
        msg: |
          
          🎉 WORDPRESS & PHP UPGRADE COMPLETE!
          ====================================
          
          {{ container_test.stdout }}
          
          {{ functionality_test.stdout }}
          
          {{ final_validation.stdout }}
          
          📊 UPGRADE SUMMARY:
          ------------------
          ✅ WordPress upgraded to: {{ target_wp_image }}
          ✅ PHP upgraded to: 8.2 (latest)
          ✅ Database upgrade: Complete
          ✅ Site accessibility: Verified
          
          🔧 POST-UPGRADE TASKS:
          ----------------------
          1. Monitor site for 24-48 hours
          2. Check plugin functionality in WordPress admin
          3. Test all critical site features
          4. Update any remaining plugins if needed
          5. Clean up backup files when satisfied:
             rm -rf ~/upgrade-backups-{{ backup_timestamp }}/
          
          🚨 ROLLBACK (if needed):
          ------------------------
          If issues arise, rollback with:
          ansible-playbook playbooks/rollback-upgrade.yml -e backup_timestamp={{ backup_timestamp }}
          
          🎯 Your site is now running modern WordPress 6.8 + PHP 8.2!

  handlers:
    - name: rollback on failure
      shell: |
        echo "🚨 UPGRADE FAILED - ROLLING BACK..."
        
        # Stop new container
        docker stop {{ wpcontainer }}-new || true
        docker rm {{ wpcontainer }}-new || true
        
        # Restart old container
        docker start {{ wpcontainer }} || true
        
        echo "✅ Rollback complete - old container restored"
      listen: "rollback upgrade"

  vars_files:
    - ../play_vars/ovc-wp.yml 